// Package wallet provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package wallet

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllRedemptions request
	GetAllRedemptions(ctx context.Context, params *GetAllRedemptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRedemptionDetails request
	GetRedemptionDetails(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRedemptionStatusWithBody request with any body
	UpdateRedemptionStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRedemptionStatus(ctx context.Context, id string, body UpdateRedemptionStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithEmailAndPasswordWithBody request with any body
	LoginWithEmailAndPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginWithEmailAndPassword(ctx context.Context, body LoginWithEmailAndPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOtp request
	GetOtp(ctx context.Context, params *GetOtpParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SignupWithEmailAndPasswordWithBody request with any body
	SignupWithEmailAndPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SignupWithEmailAndPassword(ctx context.Context, body SignupWithEmailAndPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthenticateWithTelegramWithBody request with any body
	AuthenticateWithTelegramWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthenticateWithTelegram(ctx context.Context, body AuthenticateWithTelegramJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateJwtToken request
	GenerateJwtToken(ctx context.Context, params *GenerateJwtTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWalletBalance request
	GetWalletBalance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBalanceBySymbol request
	GetBalanceBySymbol(ctx context.Context, symbol Symbol, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupportedCoins request
	GetSupportedCoins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoinDetails request
	GetCoinDetails(ctx context.Context, symbol Symbol, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DepositMoney request
	DepositMoney(ctx context.Context, params *DepositMoneyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckApiHealth request
	CheckApiHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserLoans request
	GetUserLoans(ctx context.Context, params *GetUserLoansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLoanVaultWithBody request with any body
	CreateLoanVaultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLoanVault(ctx context.Context, body CreateLoanVaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EstimateLoanCollateral request
	EstimateLoanCollateral(ctx context.Context, params *EstimateLoanCollateralParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllLoanPlans request
	GetAllLoanPlans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepayLoanWithBody request with any body
	RepayLoanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepayLoan(ctx context.Context, body RepayLoanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLoanDetails request
	GetLoanDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePaymentWithBody request with any body
	CreatePaymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePayment(ctx context.Context, body CreatePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFriendsPoints request
	GetFriendsPoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfile request
	GetUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RedeemZarWithBody request with any body
	RedeemZarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RedeemZar(ctx context.Context, body RedeemZarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReferrals request
	GetReferrals(ctx context.Context, params *GetReferralsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReferralById request
	GetReferralById(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RedeemReferral request
	RedeemReferral(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateReferral request
	ValidateReferral(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SwapCoinsWithBody request with any body
	SwapCoinsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SwapCoins(ctx context.Context, body SwapCoinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasks request
	GetTasks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserTransactions request
	GetUserTransactions(ctx context.Context, params *GetUserTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateChildUserWithBody request with any body
	CreateChildUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateChildUser(ctx context.Context, body CreateChildUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyUserEmailAddressWithBody request with any body
	VerifyUserEmailAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyUserEmailAddress(ctx context.Context, body VerifyUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitEmailConfirmationOtpWithBody request with any body
	SubmitEmailConfirmationOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitEmailConfirmationOtp(ctx context.Context, body SubmitEmailConfirmationOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitKycWithBody request with any body
	SubmitKycWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitKyc(ctx context.Context, body SubmitKycJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfirmKycWithBody request with any body
	ConfirmKycWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfirmKyc(ctx context.Context, body ConfirmKycJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyPhoneNumberWithBody request with any body
	VerifyPhoneNumberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyPhoneNumber(ctx context.Context, body VerifyPhoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfirmPhoneNumberWithBody request with any body
	ConfirmPhoneNumberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfirmPhoneNumber(ctx context.Context, body ConfirmPhoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyUserEmail request
	VerifyUserEmail(ctx context.Context, params *VerifyUserEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserWithdrawRequests request
	GetUserWithdrawRequests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PreviewWithdrawalWithBody request with any body
	PreviewWithdrawalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PreviewWithdrawal(ctx context.Context, body PreviewWithdrawalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RequestWithdrawalWithBody request with any body
	RequestWithdrawalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestWithdrawal(ctx context.Context, body RequestWithdrawalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWithdrawalStatus request
	GetWithdrawalStatus(ctx context.Context, id WithdrawalIdRequest, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllRedemptions(ctx context.Context, params *GetAllRedemptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllRedemptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRedemptionDetails(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRedemptionDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRedemptionStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRedemptionStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRedemptionStatus(ctx context.Context, id string, body UpdateRedemptionStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRedemptionStatusRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithEmailAndPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginWithEmailAndPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithEmailAndPassword(ctx context.Context, body LoginWithEmailAndPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginWithEmailAndPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOtp(ctx context.Context, params *GetOtpParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOtpRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignupWithEmailAndPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignupWithEmailAndPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignupWithEmailAndPassword(ctx context.Context, body SignupWithEmailAndPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignupWithEmailAndPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticateWithTelegramWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticateWithTelegramRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticateWithTelegram(ctx context.Context, body AuthenticateWithTelegramJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticateWithTelegramRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateJwtToken(ctx context.Context, params *GenerateJwtTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateJwtTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWalletBalance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWalletBalanceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBalanceBySymbol(ctx context.Context, symbol Symbol, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBalanceBySymbolRequest(c.Server, symbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupportedCoins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportedCoinsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoinDetails(ctx context.Context, symbol Symbol, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoinDetailsRequest(c.Server, symbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DepositMoney(ctx context.Context, params *DepositMoneyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepositMoneyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckApiHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckApiHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserLoans(ctx context.Context, params *GetUserLoansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserLoansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLoanVaultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLoanVaultRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLoanVault(ctx context.Context, body CreateLoanVaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLoanVaultRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EstimateLoanCollateral(ctx context.Context, params *EstimateLoanCollateralParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEstimateLoanCollateralRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllLoanPlans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllLoanPlansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepayLoanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepayLoanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepayLoan(ctx context.Context, body RepayLoanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepayLoanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoanDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoanDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePaymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePaymentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePayment(ctx context.Context, body CreatePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePaymentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFriendsPoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFriendsPointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RedeemZarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRedeemZarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RedeemZar(ctx context.Context, body RedeemZarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRedeemZarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReferrals(ctx context.Context, params *GetReferralsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReferralsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReferralById(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReferralByIdRequest(c.Server, referralId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RedeemReferral(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRedeemReferralRequest(c.Server, referralId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateReferral(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateReferralRequest(c.Server, referralId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapCoinsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapCoinsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapCoins(ctx context.Context, body SwapCoinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapCoinsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserTransactions(ctx context.Context, params *GetUserTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserTransactionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChildUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChildUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChildUser(ctx context.Context, body CreateChildUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChildUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyUserEmailAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyUserEmailAddressRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyUserEmailAddress(ctx context.Context, body VerifyUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyUserEmailAddressRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitEmailConfirmationOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitEmailConfirmationOtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitEmailConfirmationOtp(ctx context.Context, body SubmitEmailConfirmationOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitEmailConfirmationOtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitKycWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitKycRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitKyc(ctx context.Context, body SubmitKycJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitKycRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmKycWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmKycRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmKyc(ctx context.Context, body ConfirmKycJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmKycRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyPhoneNumberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyPhoneNumberRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyPhoneNumber(ctx context.Context, body VerifyPhoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyPhoneNumberRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmPhoneNumberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmPhoneNumberRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmPhoneNumber(ctx context.Context, body ConfirmPhoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmPhoneNumberRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyUserEmail(ctx context.Context, params *VerifyUserEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyUserEmailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserWithdrawRequests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserWithdrawRequestsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PreviewWithdrawalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreviewWithdrawalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PreviewWithdrawal(ctx context.Context, body PreviewWithdrawalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreviewWithdrawalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestWithdrawalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestWithdrawalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestWithdrawal(ctx context.Context, body RequestWithdrawalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestWithdrawalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWithdrawalStatus(ctx context.Context, id WithdrawalIdRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWithdrawalStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllRedemptionsRequest generates requests for GetAllRedemptions
func NewGetAllRedemptionsRequest(server string, params *GetAllRedemptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/redemptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRedemptionDetailsRequest generates requests for GetRedemptionDetails
func NewGetRedemptionDetailsRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/redemptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRedemptionStatusRequest calls the generic UpdateRedemptionStatus builder with application/json body
func NewUpdateRedemptionStatusRequest(server string, id string, body UpdateRedemptionStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRedemptionStatusRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateRedemptionStatusRequestWithBody generates requests for UpdateRedemptionStatus with any type of body
func NewUpdateRedemptionStatusRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/redemptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginWithEmailAndPasswordRequest calls the generic LoginWithEmailAndPassword builder with application/json body
func NewLoginWithEmailAndPasswordRequest(server string, body LoginWithEmailAndPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginWithEmailAndPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginWithEmailAndPasswordRequestWithBody generates requests for LoginWithEmailAndPassword with any type of body
func NewLoginWithEmailAndPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOtpRequest generates requests for GetOtp
func NewGetOtpRequest(server string, params *GetOtpParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/otp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSignupWithEmailAndPasswordRequest calls the generic SignupWithEmailAndPassword builder with application/json body
func NewSignupWithEmailAndPasswordRequest(server string, body SignupWithEmailAndPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSignupWithEmailAndPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewSignupWithEmailAndPasswordRequestWithBody generates requests for SignupWithEmailAndPassword with any type of body
func NewSignupWithEmailAndPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthenticateWithTelegramRequest calls the generic AuthenticateWithTelegram builder with application/json body
func NewAuthenticateWithTelegramRequest(server string, body AuthenticateWithTelegramJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthenticateWithTelegramRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthenticateWithTelegramRequestWithBody generates requests for AuthenticateWithTelegram with any type of body
func NewAuthenticateWithTelegramRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/telegram")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateJwtTokenRequest generates requests for GenerateJwtToken
func NewGenerateJwtTokenRequest(server string, params *GenerateJwtTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration", runtime.ParamLocationQuery, params.Duration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWalletBalanceRequest generates requests for GetWalletBalance
func NewGetWalletBalanceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBalanceBySymbolRequest generates requests for GetBalanceBySymbol
func NewGetBalanceBySymbolRequest(server string, symbol Symbol) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupportedCoinsRequest generates requests for GetSupportedCoins
func NewGetSupportedCoinsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/coins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCoinDetailsRequest generates requests for GetCoinDetails
func NewGetCoinDetailsRequest(server string, symbol Symbol) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/coins/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDepositMoneyRequest generates requests for DepositMoney
func NewDepositMoneyRequest(server string, params *DepositMoneyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deposit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network", runtime.ParamLocationQuery, params.Network); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckApiHealthRequest generates requests for CheckApiHealth
func NewCheckApiHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/healthz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserLoansRequest generates requests for GetUserLoans
func NewGetUserLoansRequest(server string, params *GetUserLoansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/loans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlanName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "planName", runtime.ParamLocationQuery, *params.PlanName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLoanVaultRequest calls the generic CreateLoanVault builder with application/json body
func NewCreateLoanVaultRequest(server string, body CreateLoanVaultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLoanVaultRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateLoanVaultRequestWithBody generates requests for CreateLoanVault with any type of body
func NewCreateLoanVaultRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/loans/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEstimateLoanCollateralRequest generates requests for EstimateLoanCollateral
func NewEstimateLoanCollateralRequest(server string, params *EstimateLoanCollateralParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/loans/estimate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "planName", runtime.ParamLocationQuery, params.PlanName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "loanToValueOption", runtime.ParamLocationQuery, params.LoanToValueOption); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inputType", runtime.ParamLocationQuery, params.InputType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllLoanPlansRequest generates requests for GetAllLoanPlans
func NewGetAllLoanPlansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/loans/plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepayLoanRequest calls the generic RepayLoan builder with application/json body
func NewRepayLoanRequest(server string, body RepayLoanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepayLoanRequestWithBody(server, "application/json", bodyReader)
}

// NewRepayLoanRequestWithBody generates requests for RepayLoan with any type of body
func NewRepayLoanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/loans/repay")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLoanDetailsRequest generates requests for GetLoanDetails
func NewGetLoanDetailsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/loans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePaymentRequest calls the generic CreatePayment builder with application/json body
func NewCreatePaymentRequest(server string, body CreatePaymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePaymentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePaymentRequestWithBody generates requests for CreatePayment with any type of body
func NewCreatePaymentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFriendsPointsRequest generates requests for GetFriendsPoints
func NewGetFriendsPointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/points/frineds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileRequest generates requests for GetUserProfile
func NewGetUserProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRedeemZarRequest calls the generic RedeemZar builder with application/json body
func NewRedeemZarRequest(server string, body RedeemZarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRedeemZarRequestWithBody(server, "application/json", bodyReader)
}

// NewRedeemZarRequestWithBody generates requests for RedeemZar with any type of body
func NewRedeemZarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/redemptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReferralsRequest generates requests for GetReferrals
func NewGetReferralsRequest(server string, params *GetReferralsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/referrals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReferralByIdRequest generates requests for GetReferralById
func NewGetReferralByIdRequest(server string, referralId ReferralIdParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "referralId", runtime.ParamLocationPath, referralId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/referrals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRedeemReferralRequest generates requests for RedeemReferral
func NewRedeemReferralRequest(server string, referralId ReferralIdParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "referralId", runtime.ParamLocationPath, referralId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/referrals/%s/redeem", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateReferralRequest generates requests for ValidateReferral
func NewValidateReferralRequest(server string, referralId ReferralIdParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "referralId", runtime.ParamLocationPath, referralId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/referrals/%s/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSwapCoinsRequest calls the generic SwapCoins builder with application/json body
func NewSwapCoinsRequest(server string, body SwapCoinsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSwapCoinsRequestWithBody(server, "application/json", bodyReader)
}

// NewSwapCoinsRequestWithBody generates requests for SwapCoins with any type of body
func NewSwapCoinsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTasksRequest generates requests for GetTasks
func NewGetTasksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserTransactionsRequest generates requests for GetUserTransactions
func NewGetUserTransactionsRequest(server string, params *GetUserTransactionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transactions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateChildUserRequest calls the generic CreateChildUser builder with application/json body
func NewCreateChildUserRequest(server string, body CreateChildUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateChildUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateChildUserRequestWithBody generates requests for CreateChildUser with any type of body
func NewCreateChildUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/children")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyUserEmailAddressRequest calls the generic VerifyUserEmailAddress builder with application/json body
func NewVerifyUserEmailAddressRequest(server string, body VerifyUserEmailAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyUserEmailAddressRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyUserEmailAddressRequestWithBody generates requests for VerifyUserEmailAddress with any type of body
func NewVerifyUserEmailAddressRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSubmitEmailConfirmationOtpRequest calls the generic SubmitEmailConfirmationOtp builder with application/json body
func NewSubmitEmailConfirmationOtpRequest(server string, body SubmitEmailConfirmationOtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitEmailConfirmationOtpRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitEmailConfirmationOtpRequestWithBody generates requests for SubmitEmailConfirmationOtp with any type of body
func NewSubmitEmailConfirmationOtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/email/confirm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSubmitKycRequest calls the generic SubmitKyc builder with application/json body
func NewSubmitKycRequest(server string, body SubmitKycJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitKycRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitKycRequestWithBody generates requests for SubmitKyc with any type of body
func NewSubmitKycRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/kyc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConfirmKycRequest calls the generic ConfirmKyc builder with application/json body
func NewConfirmKycRequest(server string, body ConfirmKycJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfirmKycRequestWithBody(server, "application/json", bodyReader)
}

// NewConfirmKycRequestWithBody generates requests for ConfirmKyc with any type of body
func NewConfirmKycRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/kyc/confirm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyPhoneNumberRequest calls the generic VerifyPhoneNumber builder with application/json body
func NewVerifyPhoneNumberRequest(server string, body VerifyPhoneNumberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyPhoneNumberRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyPhoneNumberRequestWithBody generates requests for VerifyPhoneNumber with any type of body
func NewVerifyPhoneNumberRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/phone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConfirmPhoneNumberRequest calls the generic ConfirmPhoneNumber builder with application/json body
func NewConfirmPhoneNumberRequest(server string, body ConfirmPhoneNumberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfirmPhoneNumberRequestWithBody(server, "application/json", bodyReader)
}

// NewConfirmPhoneNumberRequestWithBody generates requests for ConfirmPhoneNumber with any type of body
func NewConfirmPhoneNumberRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/phone/confirm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyUserEmailRequest generates requests for VerifyUserEmail
func NewVerifyUserEmailRequest(server string, params *VerifyUserEmailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verify-email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserWithdrawRequestsRequest generates requests for GetUserWithdrawRequests
func NewGetUserWithdrawRequestsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/withdraws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPreviewWithdrawalRequest calls the generic PreviewWithdrawal builder with application/json body
func NewPreviewWithdrawalRequest(server string, body PreviewWithdrawalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPreviewWithdrawalRequestWithBody(server, "application/json", bodyReader)
}

// NewPreviewWithdrawalRequestWithBody generates requests for PreviewWithdrawal with any type of body
func NewPreviewWithdrawalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/withdraws/preview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRequestWithdrawalRequest calls the generic RequestWithdrawal builder with application/json body
func NewRequestWithdrawalRequest(server string, body RequestWithdrawalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestWithdrawalRequestWithBody(server, "application/json", bodyReader)
}

// NewRequestWithdrawalRequestWithBody generates requests for RequestWithdrawal with any type of body
func NewRequestWithdrawalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/withdraws/request")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWithdrawalStatusRequest generates requests for GetWithdrawalStatus
func NewGetWithdrawalStatusRequest(server string, id WithdrawalIdRequest) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/withdraws/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllRedemptionsWithResponse request
	GetAllRedemptionsWithResponse(ctx context.Context, params *GetAllRedemptionsParams, reqEditors ...RequestEditorFn) (*GetAllRedemptionsResponse, error)

	// GetRedemptionDetailsWithResponse request
	GetRedemptionDetailsWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetRedemptionDetailsResponse, error)

	// UpdateRedemptionStatusWithBodyWithResponse request with any body
	UpdateRedemptionStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRedemptionStatusResponse, error)

	UpdateRedemptionStatusWithResponse(ctx context.Context, id string, body UpdateRedemptionStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRedemptionStatusResponse, error)

	// LoginWithEmailAndPasswordWithBodyWithResponse request with any body
	LoginWithEmailAndPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginWithEmailAndPasswordResponse, error)

	LoginWithEmailAndPasswordWithResponse(ctx context.Context, body LoginWithEmailAndPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginWithEmailAndPasswordResponse, error)

	// GetOtpWithResponse request
	GetOtpWithResponse(ctx context.Context, params *GetOtpParams, reqEditors ...RequestEditorFn) (*GetOtpResponse, error)

	// SignupWithEmailAndPasswordWithBodyWithResponse request with any body
	SignupWithEmailAndPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignupWithEmailAndPasswordResponse, error)

	SignupWithEmailAndPasswordWithResponse(ctx context.Context, body SignupWithEmailAndPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*SignupWithEmailAndPasswordResponse, error)

	// AuthenticateWithTelegramWithBodyWithResponse request with any body
	AuthenticateWithTelegramWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthenticateWithTelegramResponse, error)

	AuthenticateWithTelegramWithResponse(ctx context.Context, body AuthenticateWithTelegramJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthenticateWithTelegramResponse, error)

	// GenerateJwtTokenWithResponse request
	GenerateJwtTokenWithResponse(ctx context.Context, params *GenerateJwtTokenParams, reqEditors ...RequestEditorFn) (*GenerateJwtTokenResponse, error)

	// GetWalletBalanceWithResponse request
	GetWalletBalanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWalletBalanceResponse, error)

	// GetBalanceBySymbolWithResponse request
	GetBalanceBySymbolWithResponse(ctx context.Context, symbol Symbol, reqEditors ...RequestEditorFn) (*GetBalanceBySymbolResponse, error)

	// GetSupportedCoinsWithResponse request
	GetSupportedCoinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportedCoinsResponse, error)

	// GetCoinDetailsWithResponse request
	GetCoinDetailsWithResponse(ctx context.Context, symbol Symbol, reqEditors ...RequestEditorFn) (*GetCoinDetailsResponse, error)

	// DepositMoneyWithResponse request
	DepositMoneyWithResponse(ctx context.Context, params *DepositMoneyParams, reqEditors ...RequestEditorFn) (*DepositMoneyResponse, error)

	// CheckApiHealthWithResponse request
	CheckApiHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CheckApiHealthResponse, error)

	// GetUserLoansWithResponse request
	GetUserLoansWithResponse(ctx context.Context, params *GetUserLoansParams, reqEditors ...RequestEditorFn) (*GetUserLoansResponse, error)

	// CreateLoanVaultWithBodyWithResponse request with any body
	CreateLoanVaultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLoanVaultResponse, error)

	CreateLoanVaultWithResponse(ctx context.Context, body CreateLoanVaultJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLoanVaultResponse, error)

	// EstimateLoanCollateralWithResponse request
	EstimateLoanCollateralWithResponse(ctx context.Context, params *EstimateLoanCollateralParams, reqEditors ...RequestEditorFn) (*EstimateLoanCollateralResponse, error)

	// GetAllLoanPlansWithResponse request
	GetAllLoanPlansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllLoanPlansResponse, error)

	// RepayLoanWithBodyWithResponse request with any body
	RepayLoanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepayLoanResponse, error)

	RepayLoanWithResponse(ctx context.Context, body RepayLoanJSONRequestBody, reqEditors ...RequestEditorFn) (*RepayLoanResponse, error)

	// GetLoanDetailsWithResponse request
	GetLoanDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetLoanDetailsResponse, error)

	// CreatePaymentWithBodyWithResponse request with any body
	CreatePaymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePaymentResponse, error)

	CreatePaymentWithResponse(ctx context.Context, body CreatePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePaymentResponse, error)

	// GetFriendsPointsWithResponse request
	GetFriendsPointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFriendsPointsResponse, error)

	// GetUserProfileWithResponse request
	GetUserProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserProfileResponse, error)

	// RedeemZarWithBodyWithResponse request with any body
	RedeemZarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RedeemZarResponse, error)

	RedeemZarWithResponse(ctx context.Context, body RedeemZarJSONRequestBody, reqEditors ...RequestEditorFn) (*RedeemZarResponse, error)

	// GetReferralsWithResponse request
	GetReferralsWithResponse(ctx context.Context, params *GetReferralsParams, reqEditors ...RequestEditorFn) (*GetReferralsResponse, error)

	// GetReferralByIdWithResponse request
	GetReferralByIdWithResponse(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*GetReferralByIdResponse, error)

	// RedeemReferralWithResponse request
	RedeemReferralWithResponse(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*RedeemReferralResponse, error)

	// ValidateReferralWithResponse request
	ValidateReferralWithResponse(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*ValidateReferralResponse, error)

	// SwapCoinsWithBodyWithResponse request with any body
	SwapCoinsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwapCoinsResponse, error)

	SwapCoinsWithResponse(ctx context.Context, body SwapCoinsJSONRequestBody, reqEditors ...RequestEditorFn) (*SwapCoinsResponse, error)

	// GetTasksWithResponse request
	GetTasksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTasksResponse, error)

	// GetUserTransactionsWithResponse request
	GetUserTransactionsWithResponse(ctx context.Context, params *GetUserTransactionsParams, reqEditors ...RequestEditorFn) (*GetUserTransactionsResponse, error)

	// CreateChildUserWithBodyWithResponse request with any body
	CreateChildUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChildUserResponse, error)

	CreateChildUserWithResponse(ctx context.Context, body CreateChildUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChildUserResponse, error)

	// VerifyUserEmailAddressWithBodyWithResponse request with any body
	VerifyUserEmailAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyUserEmailAddressResponse, error)

	VerifyUserEmailAddressWithResponse(ctx context.Context, body VerifyUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyUserEmailAddressResponse, error)

	// SubmitEmailConfirmationOtpWithBodyWithResponse request with any body
	SubmitEmailConfirmationOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitEmailConfirmationOtpResponse, error)

	SubmitEmailConfirmationOtpWithResponse(ctx context.Context, body SubmitEmailConfirmationOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitEmailConfirmationOtpResponse, error)

	// SubmitKycWithBodyWithResponse request with any body
	SubmitKycWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitKycResponse, error)

	SubmitKycWithResponse(ctx context.Context, body SubmitKycJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitKycResponse, error)

	// ConfirmKycWithBodyWithResponse request with any body
	ConfirmKycWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmKycResponse, error)

	ConfirmKycWithResponse(ctx context.Context, body ConfirmKycJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmKycResponse, error)

	// VerifyPhoneNumberWithBodyWithResponse request with any body
	VerifyPhoneNumberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyPhoneNumberResponse, error)

	VerifyPhoneNumberWithResponse(ctx context.Context, body VerifyPhoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyPhoneNumberResponse, error)

	// ConfirmPhoneNumberWithBodyWithResponse request with any body
	ConfirmPhoneNumberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmPhoneNumberResponse, error)

	ConfirmPhoneNumberWithResponse(ctx context.Context, body ConfirmPhoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmPhoneNumberResponse, error)

	// VerifyUserEmailWithResponse request
	VerifyUserEmailWithResponse(ctx context.Context, params *VerifyUserEmailParams, reqEditors ...RequestEditorFn) (*VerifyUserEmailResponse, error)

	// GetUserWithdrawRequestsWithResponse request
	GetUserWithdrawRequestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserWithdrawRequestsResponse, error)

	// PreviewWithdrawalWithBodyWithResponse request with any body
	PreviewWithdrawalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PreviewWithdrawalResponse, error)

	PreviewWithdrawalWithResponse(ctx context.Context, body PreviewWithdrawalJSONRequestBody, reqEditors ...RequestEditorFn) (*PreviewWithdrawalResponse, error)

	// RequestWithdrawalWithBodyWithResponse request with any body
	RequestWithdrawalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestWithdrawalResponse, error)

	RequestWithdrawalWithResponse(ctx context.Context, body RequestWithdrawalJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestWithdrawalResponse, error)

	// GetWithdrawalStatusWithResponse request
	GetWithdrawalStatusWithResponse(ctx context.Context, id WithdrawalIdRequest, reqEditors ...RequestEditorFn) (*GetWithdrawalStatusResponse, error)
}

type GetAllRedemptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RedemptionResponse
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAllRedemptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllRedemptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRedemptionDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Redemption
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetRedemptionDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRedemptionDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRedemptionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Redemption
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateRedemptionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRedemptionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginWithEmailAndPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JwtResponse
	JSON400      *Error
	JSON401      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r LoginWithEmailAndPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginWithEmailAndPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimpleResponse
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetOtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SignupWithEmailAndPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimpleResponse
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SignupWithEmailAndPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SignupWithEmailAndPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthenticateWithTelegramResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JwtResponse
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AuthenticateWithTelegramResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticateWithTelegramResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateJwtTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JwtResponse
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GenerateJwtTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateJwtTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWalletBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WalletBalance
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetWalletBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWalletBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBalanceBySymbolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Balance
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetBalanceBySymbolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBalanceBySymbolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportedCoinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CoinResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSupportedCoinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportedCoinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCoinDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Coin
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetCoinDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoinDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DepositMoneyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DepositResponse
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DepositMoneyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DepositMoneyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckApiHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthStatus
}

// Status returns HTTPResponse.Status
func (r CheckApiHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckApiHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserLoansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoansResponseList
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserLoansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserLoansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLoanVaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoansResponse
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateLoanVaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLoanVaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EstimateLoanCollateralResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Currency
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r EstimateLoanCollateralResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EstimateLoanCollateralResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllLoanPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoanPlanResponse
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAllLoanPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllLoanPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepayLoanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoansResponse
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r RepayLoanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepayLoanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoanDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoansResponse
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetLoanDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoanDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePaymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Payment
	JSON400      *UserError
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreatePaymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePaymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFriendsPointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FriendPointsResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFriendsPointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFriendsPointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileResponse
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RedeemZarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Redemption
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r RedeemZarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RedeemZarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReferralsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReferralResponse
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetReferralsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReferralsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReferralByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Referral
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetReferralByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReferralByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RedeemReferralResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r RedeemReferralResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RedeemReferralResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateReferralResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ValidateReferralResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateReferralResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SwapCoinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SwapResponse
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SwapCoinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SwapCoinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateChildUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateChildUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateChildUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyUserEmailAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimpleResponse
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r VerifyUserEmailAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyUserEmailAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitEmailConfirmationOtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimpleResponse
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SubmitEmailConfirmationOtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitEmailConfirmationOtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitKycResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KycResponse
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SubmitKycResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitKycResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfirmKycResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimpleResponse
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ConfirmKycResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfirmKycResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r VerifyPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfirmPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ConfirmPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfirmPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyUserEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JwtResponse
	JSON400      *UserError
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r VerifyUserEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyUserEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserWithdrawRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WithdrawRequestResponse
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserWithdrawRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserWithdrawRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreviewWithdrawalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WithdrawRequestPreview
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PreviewWithdrawalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreviewWithdrawalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestWithdrawalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WithdrawResponseBody
	JSON400      *UserError
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r RequestWithdrawalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestWithdrawalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWithdrawalStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WithdrawRequest
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetWithdrawalStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWithdrawalStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllRedemptionsWithResponse request returning *GetAllRedemptionsResponse
func (c *ClientWithResponses) GetAllRedemptionsWithResponse(ctx context.Context, params *GetAllRedemptionsParams, reqEditors ...RequestEditorFn) (*GetAllRedemptionsResponse, error) {
	rsp, err := c.GetAllRedemptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllRedemptionsResponse(rsp)
}

// GetRedemptionDetailsWithResponse request returning *GetRedemptionDetailsResponse
func (c *ClientWithResponses) GetRedemptionDetailsWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetRedemptionDetailsResponse, error) {
	rsp, err := c.GetRedemptionDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRedemptionDetailsResponse(rsp)
}

// UpdateRedemptionStatusWithBodyWithResponse request with arbitrary body returning *UpdateRedemptionStatusResponse
func (c *ClientWithResponses) UpdateRedemptionStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRedemptionStatusResponse, error) {
	rsp, err := c.UpdateRedemptionStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRedemptionStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateRedemptionStatusWithResponse(ctx context.Context, id string, body UpdateRedemptionStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRedemptionStatusResponse, error) {
	rsp, err := c.UpdateRedemptionStatus(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRedemptionStatusResponse(rsp)
}

// LoginWithEmailAndPasswordWithBodyWithResponse request with arbitrary body returning *LoginWithEmailAndPasswordResponse
func (c *ClientWithResponses) LoginWithEmailAndPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginWithEmailAndPasswordResponse, error) {
	rsp, err := c.LoginWithEmailAndPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginWithEmailAndPasswordResponse(rsp)
}

func (c *ClientWithResponses) LoginWithEmailAndPasswordWithResponse(ctx context.Context, body LoginWithEmailAndPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginWithEmailAndPasswordResponse, error) {
	rsp, err := c.LoginWithEmailAndPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginWithEmailAndPasswordResponse(rsp)
}

// GetOtpWithResponse request returning *GetOtpResponse
func (c *ClientWithResponses) GetOtpWithResponse(ctx context.Context, params *GetOtpParams, reqEditors ...RequestEditorFn) (*GetOtpResponse, error) {
	rsp, err := c.GetOtp(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOtpResponse(rsp)
}

// SignupWithEmailAndPasswordWithBodyWithResponse request with arbitrary body returning *SignupWithEmailAndPasswordResponse
func (c *ClientWithResponses) SignupWithEmailAndPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignupWithEmailAndPasswordResponse, error) {
	rsp, err := c.SignupWithEmailAndPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignupWithEmailAndPasswordResponse(rsp)
}

func (c *ClientWithResponses) SignupWithEmailAndPasswordWithResponse(ctx context.Context, body SignupWithEmailAndPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*SignupWithEmailAndPasswordResponse, error) {
	rsp, err := c.SignupWithEmailAndPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignupWithEmailAndPasswordResponse(rsp)
}

// AuthenticateWithTelegramWithBodyWithResponse request with arbitrary body returning *AuthenticateWithTelegramResponse
func (c *ClientWithResponses) AuthenticateWithTelegramWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthenticateWithTelegramResponse, error) {
	rsp, err := c.AuthenticateWithTelegramWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticateWithTelegramResponse(rsp)
}

func (c *ClientWithResponses) AuthenticateWithTelegramWithResponse(ctx context.Context, body AuthenticateWithTelegramJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthenticateWithTelegramResponse, error) {
	rsp, err := c.AuthenticateWithTelegram(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticateWithTelegramResponse(rsp)
}

// GenerateJwtTokenWithResponse request returning *GenerateJwtTokenResponse
func (c *ClientWithResponses) GenerateJwtTokenWithResponse(ctx context.Context, params *GenerateJwtTokenParams, reqEditors ...RequestEditorFn) (*GenerateJwtTokenResponse, error) {
	rsp, err := c.GenerateJwtToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateJwtTokenResponse(rsp)
}

// GetWalletBalanceWithResponse request returning *GetWalletBalanceResponse
func (c *ClientWithResponses) GetWalletBalanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWalletBalanceResponse, error) {
	rsp, err := c.GetWalletBalance(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWalletBalanceResponse(rsp)
}

// GetBalanceBySymbolWithResponse request returning *GetBalanceBySymbolResponse
func (c *ClientWithResponses) GetBalanceBySymbolWithResponse(ctx context.Context, symbol Symbol, reqEditors ...RequestEditorFn) (*GetBalanceBySymbolResponse, error) {
	rsp, err := c.GetBalanceBySymbol(ctx, symbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBalanceBySymbolResponse(rsp)
}

// GetSupportedCoinsWithResponse request returning *GetSupportedCoinsResponse
func (c *ClientWithResponses) GetSupportedCoinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportedCoinsResponse, error) {
	rsp, err := c.GetSupportedCoins(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportedCoinsResponse(rsp)
}

// GetCoinDetailsWithResponse request returning *GetCoinDetailsResponse
func (c *ClientWithResponses) GetCoinDetailsWithResponse(ctx context.Context, symbol Symbol, reqEditors ...RequestEditorFn) (*GetCoinDetailsResponse, error) {
	rsp, err := c.GetCoinDetails(ctx, symbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCoinDetailsResponse(rsp)
}

// DepositMoneyWithResponse request returning *DepositMoneyResponse
func (c *ClientWithResponses) DepositMoneyWithResponse(ctx context.Context, params *DepositMoneyParams, reqEditors ...RequestEditorFn) (*DepositMoneyResponse, error) {
	rsp, err := c.DepositMoney(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepositMoneyResponse(rsp)
}

// CheckApiHealthWithResponse request returning *CheckApiHealthResponse
func (c *ClientWithResponses) CheckApiHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CheckApiHealthResponse, error) {
	rsp, err := c.CheckApiHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckApiHealthResponse(rsp)
}

// GetUserLoansWithResponse request returning *GetUserLoansResponse
func (c *ClientWithResponses) GetUserLoansWithResponse(ctx context.Context, params *GetUserLoansParams, reqEditors ...RequestEditorFn) (*GetUserLoansResponse, error) {
	rsp, err := c.GetUserLoans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserLoansResponse(rsp)
}

// CreateLoanVaultWithBodyWithResponse request with arbitrary body returning *CreateLoanVaultResponse
func (c *ClientWithResponses) CreateLoanVaultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLoanVaultResponse, error) {
	rsp, err := c.CreateLoanVaultWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLoanVaultResponse(rsp)
}

func (c *ClientWithResponses) CreateLoanVaultWithResponse(ctx context.Context, body CreateLoanVaultJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLoanVaultResponse, error) {
	rsp, err := c.CreateLoanVault(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLoanVaultResponse(rsp)
}

// EstimateLoanCollateralWithResponse request returning *EstimateLoanCollateralResponse
func (c *ClientWithResponses) EstimateLoanCollateralWithResponse(ctx context.Context, params *EstimateLoanCollateralParams, reqEditors ...RequestEditorFn) (*EstimateLoanCollateralResponse, error) {
	rsp, err := c.EstimateLoanCollateral(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEstimateLoanCollateralResponse(rsp)
}

// GetAllLoanPlansWithResponse request returning *GetAllLoanPlansResponse
func (c *ClientWithResponses) GetAllLoanPlansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllLoanPlansResponse, error) {
	rsp, err := c.GetAllLoanPlans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllLoanPlansResponse(rsp)
}

// RepayLoanWithBodyWithResponse request with arbitrary body returning *RepayLoanResponse
func (c *ClientWithResponses) RepayLoanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepayLoanResponse, error) {
	rsp, err := c.RepayLoanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepayLoanResponse(rsp)
}

func (c *ClientWithResponses) RepayLoanWithResponse(ctx context.Context, body RepayLoanJSONRequestBody, reqEditors ...RequestEditorFn) (*RepayLoanResponse, error) {
	rsp, err := c.RepayLoan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepayLoanResponse(rsp)
}

// GetLoanDetailsWithResponse request returning *GetLoanDetailsResponse
func (c *ClientWithResponses) GetLoanDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetLoanDetailsResponse, error) {
	rsp, err := c.GetLoanDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoanDetailsResponse(rsp)
}

// CreatePaymentWithBodyWithResponse request with arbitrary body returning *CreatePaymentResponse
func (c *ClientWithResponses) CreatePaymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePaymentResponse, error) {
	rsp, err := c.CreatePaymentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePaymentResponse(rsp)
}

func (c *ClientWithResponses) CreatePaymentWithResponse(ctx context.Context, body CreatePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePaymentResponse, error) {
	rsp, err := c.CreatePayment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePaymentResponse(rsp)
}

// GetFriendsPointsWithResponse request returning *GetFriendsPointsResponse
func (c *ClientWithResponses) GetFriendsPointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFriendsPointsResponse, error) {
	rsp, err := c.GetFriendsPoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFriendsPointsResponse(rsp)
}

// GetUserProfileWithResponse request returning *GetUserProfileResponse
func (c *ClientWithResponses) GetUserProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserProfileResponse, error) {
	rsp, err := c.GetUserProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileResponse(rsp)
}

// RedeemZarWithBodyWithResponse request with arbitrary body returning *RedeemZarResponse
func (c *ClientWithResponses) RedeemZarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RedeemZarResponse, error) {
	rsp, err := c.RedeemZarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRedeemZarResponse(rsp)
}

func (c *ClientWithResponses) RedeemZarWithResponse(ctx context.Context, body RedeemZarJSONRequestBody, reqEditors ...RequestEditorFn) (*RedeemZarResponse, error) {
	rsp, err := c.RedeemZar(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRedeemZarResponse(rsp)
}

// GetReferralsWithResponse request returning *GetReferralsResponse
func (c *ClientWithResponses) GetReferralsWithResponse(ctx context.Context, params *GetReferralsParams, reqEditors ...RequestEditorFn) (*GetReferralsResponse, error) {
	rsp, err := c.GetReferrals(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReferralsResponse(rsp)
}

// GetReferralByIdWithResponse request returning *GetReferralByIdResponse
func (c *ClientWithResponses) GetReferralByIdWithResponse(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*GetReferralByIdResponse, error) {
	rsp, err := c.GetReferralById(ctx, referralId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReferralByIdResponse(rsp)
}

// RedeemReferralWithResponse request returning *RedeemReferralResponse
func (c *ClientWithResponses) RedeemReferralWithResponse(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*RedeemReferralResponse, error) {
	rsp, err := c.RedeemReferral(ctx, referralId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRedeemReferralResponse(rsp)
}

// ValidateReferralWithResponse request returning *ValidateReferralResponse
func (c *ClientWithResponses) ValidateReferralWithResponse(ctx context.Context, referralId ReferralIdParameter, reqEditors ...RequestEditorFn) (*ValidateReferralResponse, error) {
	rsp, err := c.ValidateReferral(ctx, referralId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateReferralResponse(rsp)
}

// SwapCoinsWithBodyWithResponse request with arbitrary body returning *SwapCoinsResponse
func (c *ClientWithResponses) SwapCoinsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwapCoinsResponse, error) {
	rsp, err := c.SwapCoinsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapCoinsResponse(rsp)
}

func (c *ClientWithResponses) SwapCoinsWithResponse(ctx context.Context, body SwapCoinsJSONRequestBody, reqEditors ...RequestEditorFn) (*SwapCoinsResponse, error) {
	rsp, err := c.SwapCoins(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapCoinsResponse(rsp)
}

// GetTasksWithResponse request returning *GetTasksResponse
func (c *ClientWithResponses) GetTasksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTasksResponse, error) {
	rsp, err := c.GetTasks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksResponse(rsp)
}

// GetUserTransactionsWithResponse request returning *GetUserTransactionsResponse
func (c *ClientWithResponses) GetUserTransactionsWithResponse(ctx context.Context, params *GetUserTransactionsParams, reqEditors ...RequestEditorFn) (*GetUserTransactionsResponse, error) {
	rsp, err := c.GetUserTransactions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTransactionsResponse(rsp)
}

// CreateChildUserWithBodyWithResponse request with arbitrary body returning *CreateChildUserResponse
func (c *ClientWithResponses) CreateChildUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChildUserResponse, error) {
	rsp, err := c.CreateChildUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChildUserResponse(rsp)
}

func (c *ClientWithResponses) CreateChildUserWithResponse(ctx context.Context, body CreateChildUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChildUserResponse, error) {
	rsp, err := c.CreateChildUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChildUserResponse(rsp)
}

// VerifyUserEmailAddressWithBodyWithResponse request with arbitrary body returning *VerifyUserEmailAddressResponse
func (c *ClientWithResponses) VerifyUserEmailAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyUserEmailAddressResponse, error) {
	rsp, err := c.VerifyUserEmailAddressWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyUserEmailAddressResponse(rsp)
}

func (c *ClientWithResponses) VerifyUserEmailAddressWithResponse(ctx context.Context, body VerifyUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyUserEmailAddressResponse, error) {
	rsp, err := c.VerifyUserEmailAddress(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyUserEmailAddressResponse(rsp)
}

// SubmitEmailConfirmationOtpWithBodyWithResponse request with arbitrary body returning *SubmitEmailConfirmationOtpResponse
func (c *ClientWithResponses) SubmitEmailConfirmationOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitEmailConfirmationOtpResponse, error) {
	rsp, err := c.SubmitEmailConfirmationOtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitEmailConfirmationOtpResponse(rsp)
}

func (c *ClientWithResponses) SubmitEmailConfirmationOtpWithResponse(ctx context.Context, body SubmitEmailConfirmationOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitEmailConfirmationOtpResponse, error) {
	rsp, err := c.SubmitEmailConfirmationOtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitEmailConfirmationOtpResponse(rsp)
}

// SubmitKycWithBodyWithResponse request with arbitrary body returning *SubmitKycResponse
func (c *ClientWithResponses) SubmitKycWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitKycResponse, error) {
	rsp, err := c.SubmitKycWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitKycResponse(rsp)
}

func (c *ClientWithResponses) SubmitKycWithResponse(ctx context.Context, body SubmitKycJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitKycResponse, error) {
	rsp, err := c.SubmitKyc(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitKycResponse(rsp)
}

// ConfirmKycWithBodyWithResponse request with arbitrary body returning *ConfirmKycResponse
func (c *ClientWithResponses) ConfirmKycWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmKycResponse, error) {
	rsp, err := c.ConfirmKycWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmKycResponse(rsp)
}

func (c *ClientWithResponses) ConfirmKycWithResponse(ctx context.Context, body ConfirmKycJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmKycResponse, error) {
	rsp, err := c.ConfirmKyc(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmKycResponse(rsp)
}

// VerifyPhoneNumberWithBodyWithResponse request with arbitrary body returning *VerifyPhoneNumberResponse
func (c *ClientWithResponses) VerifyPhoneNumberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyPhoneNumberResponse, error) {
	rsp, err := c.VerifyPhoneNumberWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyPhoneNumberResponse(rsp)
}

func (c *ClientWithResponses) VerifyPhoneNumberWithResponse(ctx context.Context, body VerifyPhoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyPhoneNumberResponse, error) {
	rsp, err := c.VerifyPhoneNumber(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyPhoneNumberResponse(rsp)
}

// ConfirmPhoneNumberWithBodyWithResponse request with arbitrary body returning *ConfirmPhoneNumberResponse
func (c *ClientWithResponses) ConfirmPhoneNumberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmPhoneNumberResponse, error) {
	rsp, err := c.ConfirmPhoneNumberWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmPhoneNumberResponse(rsp)
}

func (c *ClientWithResponses) ConfirmPhoneNumberWithResponse(ctx context.Context, body ConfirmPhoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmPhoneNumberResponse, error) {
	rsp, err := c.ConfirmPhoneNumber(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmPhoneNumberResponse(rsp)
}

// VerifyUserEmailWithResponse request returning *VerifyUserEmailResponse
func (c *ClientWithResponses) VerifyUserEmailWithResponse(ctx context.Context, params *VerifyUserEmailParams, reqEditors ...RequestEditorFn) (*VerifyUserEmailResponse, error) {
	rsp, err := c.VerifyUserEmail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyUserEmailResponse(rsp)
}

// GetUserWithdrawRequestsWithResponse request returning *GetUserWithdrawRequestsResponse
func (c *ClientWithResponses) GetUserWithdrawRequestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserWithdrawRequestsResponse, error) {
	rsp, err := c.GetUserWithdrawRequests(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserWithdrawRequestsResponse(rsp)
}

// PreviewWithdrawalWithBodyWithResponse request with arbitrary body returning *PreviewWithdrawalResponse
func (c *ClientWithResponses) PreviewWithdrawalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PreviewWithdrawalResponse, error) {
	rsp, err := c.PreviewWithdrawalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreviewWithdrawalResponse(rsp)
}

func (c *ClientWithResponses) PreviewWithdrawalWithResponse(ctx context.Context, body PreviewWithdrawalJSONRequestBody, reqEditors ...RequestEditorFn) (*PreviewWithdrawalResponse, error) {
	rsp, err := c.PreviewWithdrawal(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreviewWithdrawalResponse(rsp)
}

// RequestWithdrawalWithBodyWithResponse request with arbitrary body returning *RequestWithdrawalResponse
func (c *ClientWithResponses) RequestWithdrawalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestWithdrawalResponse, error) {
	rsp, err := c.RequestWithdrawalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestWithdrawalResponse(rsp)
}

func (c *ClientWithResponses) RequestWithdrawalWithResponse(ctx context.Context, body RequestWithdrawalJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestWithdrawalResponse, error) {
	rsp, err := c.RequestWithdrawal(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestWithdrawalResponse(rsp)
}

// GetWithdrawalStatusWithResponse request returning *GetWithdrawalStatusResponse
func (c *ClientWithResponses) GetWithdrawalStatusWithResponse(ctx context.Context, id WithdrawalIdRequest, reqEditors ...RequestEditorFn) (*GetWithdrawalStatusResponse, error) {
	rsp, err := c.GetWithdrawalStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWithdrawalStatusResponse(rsp)
}

// ParseGetAllRedemptionsResponse parses an HTTP response from a GetAllRedemptionsWithResponse call
func ParseGetAllRedemptionsResponse(rsp *http.Response) (*GetAllRedemptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllRedemptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RedemptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRedemptionDetailsResponse parses an HTTP response from a GetRedemptionDetailsWithResponse call
func ParseGetRedemptionDetailsResponse(rsp *http.Response) (*GetRedemptionDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRedemptionDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Redemption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateRedemptionStatusResponse parses an HTTP response from a UpdateRedemptionStatusWithResponse call
func ParseUpdateRedemptionStatusResponse(rsp *http.Response) (*UpdateRedemptionStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRedemptionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Redemption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseLoginWithEmailAndPasswordResponse parses an HTTP response from a LoginWithEmailAndPasswordWithResponse call
func ParseLoginWithEmailAndPasswordResponse(rsp *http.Response) (*LoginWithEmailAndPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginWithEmailAndPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JwtResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOtpResponse parses an HTTP response from a GetOtpWithResponse call
func ParseGetOtpResponse(rsp *http.Response) (*GetOtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimpleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSignupWithEmailAndPasswordResponse parses an HTTP response from a SignupWithEmailAndPasswordWithResponse call
func ParseSignupWithEmailAndPasswordResponse(rsp *http.Response) (*SignupWithEmailAndPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SignupWithEmailAndPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimpleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthenticateWithTelegramResponse parses an HTTP response from a AuthenticateWithTelegramWithResponse call
func ParseAuthenticateWithTelegramResponse(rsp *http.Response) (*AuthenticateWithTelegramResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthenticateWithTelegramResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JwtResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGenerateJwtTokenResponse parses an HTTP response from a GenerateJwtTokenWithResponse call
func ParseGenerateJwtTokenResponse(rsp *http.Response) (*GenerateJwtTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateJwtTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JwtResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWalletBalanceResponse parses an HTTP response from a GetWalletBalanceWithResponse call
func ParseGetWalletBalanceResponse(rsp *http.Response) (*GetWalletBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWalletBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WalletBalance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBalanceBySymbolResponse parses an HTTP response from a GetBalanceBySymbolWithResponse call
func ParseGetBalanceBySymbolResponse(rsp *http.Response) (*GetBalanceBySymbolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBalanceBySymbolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Balance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSupportedCoinsResponse parses an HTTP response from a GetSupportedCoinsWithResponse call
func ParseGetSupportedCoinsResponse(rsp *http.Response) (*GetSupportedCoinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupportedCoinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CoinResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCoinDetailsResponse parses an HTTP response from a GetCoinDetailsWithResponse call
func ParseGetCoinDetailsResponse(rsp *http.Response) (*GetCoinDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCoinDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Coin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDepositMoneyResponse parses an HTTP response from a DepositMoneyWithResponse call
func ParseDepositMoneyResponse(rsp *http.Response) (*DepositMoneyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DepositMoneyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DepositResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCheckApiHealthResponse parses an HTTP response from a CheckApiHealthWithResponse call
func ParseCheckApiHealthResponse(rsp *http.Response) (*CheckApiHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckApiHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserLoansResponse parses an HTTP response from a GetUserLoansWithResponse call
func ParseGetUserLoansResponse(rsp *http.Response) (*GetUserLoansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserLoansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoansResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateLoanVaultResponse parses an HTTP response from a CreateLoanVaultWithResponse call
func ParseCreateLoanVaultResponse(rsp *http.Response) (*CreateLoanVaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLoanVaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoansResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEstimateLoanCollateralResponse parses an HTTP response from a EstimateLoanCollateralWithResponse call
func ParseEstimateLoanCollateralResponse(rsp *http.Response) (*EstimateLoanCollateralResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EstimateLoanCollateralResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Currency
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllLoanPlansResponse parses an HTTP response from a GetAllLoanPlansWithResponse call
func ParseGetAllLoanPlansResponse(rsp *http.Response) (*GetAllLoanPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllLoanPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoanPlanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRepayLoanResponse parses an HTTP response from a RepayLoanWithResponse call
func ParseRepayLoanResponse(rsp *http.Response) (*RepayLoanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepayLoanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoansResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetLoanDetailsResponse parses an HTTP response from a GetLoanDetailsWithResponse call
func ParseGetLoanDetailsResponse(rsp *http.Response) (*GetLoanDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoanDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoansResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePaymentResponse parses an HTTP response from a CreatePaymentWithResponse call
func ParseCreatePaymentResponse(rsp *http.Response) (*CreatePaymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePaymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Payment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFriendsPointsResponse parses an HTTP response from a GetFriendsPointsWithResponse call
func ParseGetFriendsPointsResponse(rsp *http.Response) (*GetFriendsPointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFriendsPointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FriendPointsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserProfileResponse parses an HTTP response from a GetUserProfileWithResponse call
func ParseGetUserProfileResponse(rsp *http.Response) (*GetUserProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRedeemZarResponse parses an HTTP response from a RedeemZarWithResponse call
func ParseRedeemZarResponse(rsp *http.Response) (*RedeemZarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RedeemZarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Redemption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetReferralsResponse parses an HTTP response from a GetReferralsWithResponse call
func ParseGetReferralsResponse(rsp *http.Response) (*GetReferralsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReferralsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReferralResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetReferralByIdResponse parses an HTTP response from a GetReferralByIdWithResponse call
func ParseGetReferralByIdResponse(rsp *http.Response) (*GetReferralByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReferralByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Referral
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRedeemReferralResponse parses an HTTP response from a RedeemReferralWithResponse call
func ParseRedeemReferralResponse(rsp *http.Response) (*RedeemReferralResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RedeemReferralResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseValidateReferralResponse parses an HTTP response from a ValidateReferralWithResponse call
func ParseValidateReferralResponse(rsp *http.Response) (*ValidateReferralResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateReferralResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSwapCoinsResponse parses an HTTP response from a SwapCoinsWithResponse call
func ParseSwapCoinsResponse(rsp *http.Response) (*SwapCoinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SwapCoinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SwapResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTasksResponse parses an HTTP response from a GetTasksWithResponse call
func ParseGetTasksResponse(rsp *http.Response) (*GetTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserTransactionsResponse parses an HTTP response from a GetUserTransactionsWithResponse call
func ParseGetUserTransactionsResponse(rsp *http.Response) (*GetUserTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateChildUserResponse parses an HTTP response from a CreateChildUserWithResponse call
func ParseCreateChildUserResponse(rsp *http.Response) (*CreateChildUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateChildUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVerifyUserEmailAddressResponse parses an HTTP response from a VerifyUserEmailAddressWithResponse call
func ParseVerifyUserEmailAddressResponse(rsp *http.Response) (*VerifyUserEmailAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyUserEmailAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimpleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSubmitEmailConfirmationOtpResponse parses an HTTP response from a SubmitEmailConfirmationOtpWithResponse call
func ParseSubmitEmailConfirmationOtpResponse(rsp *http.Response) (*SubmitEmailConfirmationOtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitEmailConfirmationOtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimpleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSubmitKycResponse parses an HTTP response from a SubmitKycWithResponse call
func ParseSubmitKycResponse(rsp *http.Response) (*SubmitKycResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitKycResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KycResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseConfirmKycResponse parses an HTTP response from a ConfirmKycWithResponse call
func ParseConfirmKycResponse(rsp *http.Response) (*ConfirmKycResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfirmKycResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimpleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVerifyPhoneNumberResponse parses an HTTP response from a VerifyPhoneNumberWithResponse call
func ParseVerifyPhoneNumberResponse(rsp *http.Response) (*VerifyPhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseConfirmPhoneNumberResponse parses an HTTP response from a ConfirmPhoneNumberWithResponse call
func ParseConfirmPhoneNumberResponse(rsp *http.Response) (*ConfirmPhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfirmPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVerifyUserEmailResponse parses an HTTP response from a VerifyUserEmailWithResponse call
func ParseVerifyUserEmailResponse(rsp *http.Response) (*VerifyUserEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyUserEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JwtResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserWithdrawRequestsResponse parses an HTTP response from a GetUserWithdrawRequestsWithResponse call
func ParseGetUserWithdrawRequestsResponse(rsp *http.Response) (*GetUserWithdrawRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserWithdrawRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WithdrawRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePreviewWithdrawalResponse parses an HTTP response from a PreviewWithdrawalWithResponse call
func ParsePreviewWithdrawalResponse(rsp *http.Response) (*PreviewWithdrawalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreviewWithdrawalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WithdrawRequestPreview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRequestWithdrawalResponse parses an HTTP response from a RequestWithdrawalWithResponse call
func ParseRequestWithdrawalResponse(rsp *http.Response) (*RequestWithdrawalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestWithdrawalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WithdrawResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWithdrawalStatusResponse parses an HTTP response from a GetWithdrawalStatusWithResponse call
func ParseGetWithdrawalStatusResponse(rsp *http.Response) (*GetWithdrawalStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWithdrawalStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WithdrawRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
